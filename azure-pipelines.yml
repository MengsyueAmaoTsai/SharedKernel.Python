trigger:
  branches:
    include:
      - develop
      - feature/**
      - release/**
      - master
      - hotfix/**

pool:
  name: Default # Use self-host agent pool named 'Default'

resources:
  - repo: self

variables:
  buildConfiguration: Release 
  projectPath: $(Build.SourcesDirectory)/pyproject.toml
  artifactsPath: $(Build.ArtifactStagingDirectory)/artifacts

stages:
  - stage: BuildStage
    displayName: Build
    jobs:
      - job: BuildJob
        displayName: Build
        steps:
          - task: PowerShell@2
            displayName: Build
            inputs:
              targetType: inline
              script: |
                rye sync 
                rye run lint 
                rye run build
      
  - stage: TestStage 
    displayName: Test 
    dependsOn: BuildStage
    jobs:
      - job: UnitTestsJob
        displayName: Run Unit Tests 
        steps:
          - task: PowerShell@2
            displayName: Run Unit Tests
            inputs:
              targetType: inline
              script: |
                rye test          

  - stage: PublishStage
    displayName: Publish
    dependsOn: TestStage
    jobs:
      - job: PublishJob
        displayName:  Publish Artifacts
        steps:
          - task: PowerShell@2
            displayName: Generate Version
            inputs:
              targetType: inline
              script: |
                $version = & $(Build.SourcesDirectory)/scripts/GenerateBuildVersion.ps1 -Revision $(Build.BuildId)
                Write-Host "##vso[task.setvariable variable=BuildVersion]$version"

          - task: PowerShell@2
            displayName: Update Version
            inputs:
              targetType: inline
              script: |
                $pyproject = Get-Content -Path $(projectPath)
                $pyproject = $pyproject -replace 'version = ".*"', "version = ""$(BuildVersion)"""
                $pyproject | Set-Content -Path $(projectPath)
                  
          - task: PowerShell@2
            displayName: Publish Artifacts
            inputs:
              targetType: inline
              script: |
                rye run build -o $(artifactsPath)

          - task: PublishPipelineArtifact@1
            displayName: Publish RichillCapital.SharedKernel Artifacts
            inputs:
              targetPath: $(artifactsPath)
              artifact: RichillCapital.SharedKernel-$(buildConfiguration)-$(BuildVersion)
              publishLocation: pipeline                

#   - stage: ReleaseStage
#     displayName: Release
#     dependsOn: BuildStage
#     condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')

#     jobs:
#       - job: ReleaseJob
#         displayName: Build release artifacts
#         steps:
#           - task: PowerShell@2
#             displayName: Generate release version
#             inputs:
#               targetType: inline
#               script: |
#                 Write-Host "Generating release version from branch: $(Build.SourceBranch)"

#                 $branchName = "$(Build.SourceBranchName)"
#                 Write-Host "##vso[task.setvariable variable=ReleaseVersion]$branchName"

#                 Write-Host "Generated Release Version: $branchName"

#           - task: PowerShell@2
#             displayName: Update pyproject.toml version
#             inputs:
#               targetType: inline
#               script: |
#                 Write-Host "Updating version to $(ReleaseVersion)"

#                 $pyproject = Get-Content -Path "pyproject.toml"
#                 $pyproject = $pyproject -replace 'version = ".*"', "version = ""$(ReleaseVersion)"""
#                 $pyproject | Set-Content -Path "pyproject.toml"

#                 Write-Host "Updated version to $(ReleaseVersion)"

#           - script: rye run build -o $(Build.ArtifactStagingDirectory)/artifacts 
#             displayName: Generate Release Build

#           - task: PublishPipelineArtifact@1
#             displayName: Publish Release Artifact
#             inputs:
#               targetPath: '$(Build.ArtifactStagingDirectory)/artifacts'
#               artifact: 'RichillCapital.SharedKernel-Release-$(ReleaseVersion)'
#               publishLocation: 'pipeline'

#   - stage: ProductionStage
#     displayName: Production deployment
#     dependsOn: BuildStage
#     condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

#     jobs:
#       - job: DeployProductionJob
#         displayName: Publish to PyPI
#         steps:
#           - task: PowerShell@2
#             displayName: Generate release version from latest release branch
#             inputs:
#               targetType: inline
#               script: |
#                 git fetch --all

#                 $branches = git branch -r | Where-Object { $_ -match 'origin/release/\d+\.\d+\.\d+' }

#                 if (-not $branches) {
#                     Write-Error "No matching branches found."
#                     exit 1
#                 }

#                 $versions = $branches |
#                 ForEach-Object {
#                     if ($_ -match 'origin/release/(\d+\.\d+\.\d+)') {
#                         [PSCustomObject]@{
#                             BranchName = $_.Trim()
#                             Version = [System.Version]$matches[1]
#                         }
#                     }
#                 }

#                 $latestBranch = $versions |
#                     Sort-Object -Property Version -Descending |
#                     Select-Object -First 1

#                 if ($latestBranch) {
#                     Write-Host "##vso[task.setvariable variable=ReleaseVersion]$($latestBranch.Version)"
#                     Write-Host "Generated release version: $($latestBranch.Version)"
#                 } else {
#                     Write-Error "Failed to find the latest release branch."
#                     exit 1
#                 }

#           - task: PowerShell@2
#             displayName: Update pyproject.toml version
#             inputs:
#               targetType: inline
#               script: |
#                 Write-Host "Updating version to $(ReleaseVersion)"

#                 $pyproject = Get-Content -Path "pyproject.toml"
#                 $pyproject = $pyproject -replace 'version = ".*"', "version = ""$(ReleaseVersion)"""
#                 $pyproject | Set-Content -Path "pyproject.toml"

#                 Write-Host "Updated version to $(ReleaseVersion)"                

#           - script: rye run build -o $(Build.ArtifactStagingDirectory)/artifacts
#             displayName: Generate Production Build

#           - task: PowerShell@2
#             displayName: Create and push git tag
#             inputs:
#               targetType: inline
#               script: |
#                 git config user.name "Mengsyue Amao Tsai"
#                 git config user.email "mengsyue.tsai@outlook.com"
#                 git fetch --tags

#                 $tagName = "v$(ReleaseVersion)"
#                 $existingTags = git tag --list
#                 if ($existingTags -contains $tagName) {
#                   Write-Host "Tag $tagName already exists."
#                   exit 0
#                 }                

#                 git tag -a "v$(ReleaseVersion)" -m "Release version $(ReleaseVersion)"
#                 git push origin "v$(ReleaseVersion)"

#           - script: rye publish $(Build.ArtifactStagingDirectory)/artifacts/*.whl $(Build.ArtifactStagingDirectory)/artifacts/*.tar.gz --yes --skip-existing --token $(PYPI_API_TOKEN)
#             displayName: Publish to PyPI


